'''
DEBUG=True
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] host.docker.internal
POSTGRES_PASSWORD=sua_senha
DB_NAME=nome_do_db
DB_USER=seu_user
DB_PASSWORD=sua_senha
DB_HOST=host.docker.internal -> se for windows ou mac
DB_PORT=5432 -> se for sua porta (padrão)
'''
1. **Copie as variáveis acima pra o arquivo `.env` e coloque suas informações:

    * `DB_NAME`: Insira o nome do seu banco de dados PostgreSQL (ex: `mini_twitter`).
    * `DB_USER`: Insira o seu nome de usuário PostgreSQL (ex: `postgres`).
    * `DB_PASSWORD`: Insira a senha do seu usuário PostgreSQL.
    * `DB_HOST`:
        * **Windows/Mac (com Docker Desktop):** Deixe o valor como `host.docker.internal`.
        * **Linux:** Tente primeiro `127.0.0.1`. Se não funcionar, pode ser necessário encontrar o endereço IP da sua interface 
        de rede local (ex: `192.168.1.100`) e usá-lo aqui. Em casos mais complexos, pode ser preciso configurar uma rede bridge no Docker.
    * `DB_PORT`: Se o seu PostgreSQL roda na porta padrão, deixe como `5432`. Caso contrário, ajuste para a porta correta.

2.  **Após configurar o `.env`, você pode iniciar a aplicação com Docker Compose:**

    -> `docker-compose up --build`

Importante: Certifique-se de que o banco de dados com o nome especificado em `DB_NAME` já exista no seu servidor PostgreSQL local. 

O Docker Compose irá construir a imagem da aplicação e rodá-la, tentando se conectar ao seu banco de dados local com as configurações fornecidas.

Pronto, setup concluido!